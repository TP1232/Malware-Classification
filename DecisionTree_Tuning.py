import pandas as pd
from sklearn.svm import SVC
from sklearn.model_selection import GridSearchCV
from sklearn.metrics import classification_report, confusion_matrix
from sklearn.model_selection import train_test_split
import time
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
from sklearn.tree import DecisionTreeClassifier
from sklearn.preprocessing import MinMaxScaler
from sklearn.feature_selection import SelectFromModel

# =============================================================================
# # Traing and testing a model to get best hyper parameteres
# =============================================================================


df = pd.read_csv("/archive/Dataset/Dataset/train/LargeTrain.csv")

X = df.iloc[:,:-1]

Y = df.iloc[:,-1]
X = X.astype(float)
Y = Y.astype(int)
scaler = MinMaxScaler()
scaler.fit(X)
normalized_x = scaler.transform(X)
normalized_y = Y
X_train, X_test, Y_train, Y_test = train_test_split(normalized_x, normalized_y, random_state=10, test_size=0.2)

# =============================================================================
# Decision Tree part 2 tuning
# =============================================================================
start = time.time()
print('program start...')
model = DecisionTreeClassifier()
param_grid = {'max_depth'     : [6,8,10],
              'criterion'     : ['gini', 'entropy'],
              'splitter'      : ['best', 'random'],
              'min_weight_fraction_leaf'  : [0.0,0.1,0.2]
              # Add more parameters here for tuning
             }

print("Hyper Parameter Tuning Results\n")

# Finding optimum parameters through GridSearchCV
grid = GridSearchCV(estimator=model, param_grid = param_grid, cv = 5)
grid.fit(X_train, Y_train)
print(grid)
print("\n")
print("Results returned by GridSearchCV\n")
print("Best estimator: ", grid.best_estimator_)
print("\n")
print("Best score: ", grid.best_score_)
print("\n")
print("Best parameters found: ", grid.best_params_)
end = time.time()
print('program end...')
print()
print('time cost: ')
print(end - start, 'seconds')
